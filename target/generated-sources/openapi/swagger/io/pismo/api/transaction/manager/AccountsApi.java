/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.2.2).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package io.pismo.api.transaction.manager;

import io.pismo.api.transaction.manager.models.Account;
import io.pismo.api.transaction.manager.models.ApiError;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-04-07T01:25:12.942-03:00[America/Sao_Paulo]")

@Validated
@Api(value = "accounts", description = "the accounts API")
public interface AccountsApi {

    @ApiOperation(value = "Account register", nickname = "createAccount", notes = "", response = Account.class, tags={ "account", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Successful Operation", response = Account.class),
        @ApiResponse(code = 400, message = "Bad Request", response = ApiError.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ApiError.class) })
    @RequestMapping(value = "/accounts",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<Account> createAccount(@ApiParam(value = "Account created" ,required=true )  @Valid @RequestBody Account body);


    @ApiOperation(value = "Gets a list accounts information", nickname = "getAccountById", notes = "Gets a list accounts information", response = Account.class, tags={ "account", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = Account.class),
        @ApiResponse(code = 404, message = "Resource Not Found", response = ApiError.class),
        @ApiResponse(code = 500, message = "Internal Server Error", response = ApiError.class) })
    @RequestMapping(value = "/accounts/{account_id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<Account> getAccountById(@ApiParam(value = "ID of account that needs to be fetched",required=true) @PathVariable("account_id") Long accountId);

}
